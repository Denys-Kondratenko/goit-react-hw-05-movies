{"version":3,"file":"static/js/275.e4ce0bae.chunk.js","mappings":"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","sources":["API.js","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '57e1b59327fa5f75a2550cb581fcbe1f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `/3/trending/movie/day?language=en-US&api_key=${API_KEY}`,\n    {}\n  );\n  return response.data.results;\n};\n\nexport const fetchDetailsMovie = async id => {\n  const response = await axios.get(\n    `/3/movie/${id}?language=en-US&api_key=${API_KEY}`,\n    {}\n  );\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `/3/movie/${id}/credits?language=en-US&api_key=${API_KEY}`,\n    {}\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `/3/movie/${id}/reviews?language=en-US&api_key=${API_KEY}`,\n    {}\n  );\n\n  return response.data.results;\n};\n\nexport const fetchSearchMovie = async query => {\n  const response = await axios.get(\n    `/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1&api_key=${API_KEY}`,\n    {}\n  );\n  return response.data.results;\n};\n","import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies, state }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {movies.map(({ id, original_title }) => (\n        <ul key={id}>\n          <li>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {original_title}\n            </Link>\n          </li>\n        </ul>\n      ))}\n    </>\n  );\n};\n\nexport default MoviesList;\n","const Searchbar = ({ onSubmit }) => {\n  return (\n    <form action=\"\" onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        name=\"search\"\n        placeholder=\"Search movie\"\n        autoFocus\n        autoComplete=\"off\"\n      />\n      <button type=\"submit\" aria-label=\"Search movies\">\n        Search\n      </button>\n    </form>\n  );\n};\n\nexport default Searchbar;\n","import { fetchSearchMovie } from 'API';\nimport { Loader } from 'components/Loader/Loader';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(false);\n  const [loader, setLoader] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('search');\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    if (e.target.elements.search.value === '') {\n      alert('Please enter movie name');\n      return;\n    }\n    const nextParams =\n      e.target.elements.search.value !== ''\n        ? { search: e.target.elements.search.value }\n        : {};\n\n    setSearchParams(nextParams);\n    e.target.reset();\n  };\n\n  useEffect(() => {\n    if (!search) return;\n\n    const getMovies = async query => {\n      try {\n        setError(false);\n        setLoader(true);\n        const fetchedSearchMovie = await fetchSearchMovie(query);\n\n        if (fetchedSearchMovie.length === 0) {\n          throw new Error();\n        }\n\n        setMovies([...fetchedSearchMovie]);\n      } catch (error) {\n        setError('No images');\n      } finally {\n        setLoader(false);\n      }\n    };\n\n    getMovies(search);\n  }, [search]);\n\n  return (\n    <div>\n      <Searchbar onSubmit={handleFormSubmit} />\n      <MoviesList movies={movies} />\n      {loader && <Loader />}\n      {error && <p>{error}</p>}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["API_KEY","axios","fetchTrendingMovies","response","data","results","fetchDetailsMovie","id","fetchCast","cast","fetchReviews","fetchSearchMovie","query","movies","location","state","useLocation","map","original_title","to","from","onSubmit","action","type","name","placeholder","autoFocus","autoComplete","useState","setMovies","error","setError","loader","setLoader","useSearchParams","searchParams","setSearchParams","search","get","useEffect","getMovies","fetchedSearchMovie","length","Error","e","preventDefault","target","elements","value","nextParams","reset","alert","MoviesList","Loader"],"sourceRoot":""}